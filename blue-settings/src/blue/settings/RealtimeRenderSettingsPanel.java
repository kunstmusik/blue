/*
 * blue - object composition environment for csound Copyright (c) 2000-2014
 * Steven Yi (stevenyi@gmail.com)
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License or (at your option) any
 * later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.LIB. If not, write to the Free
 * Software Foundation Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307
 * USA
 */
package blue.settings;

import blue.services.render.DeviceInfo;
import blue.services.render.DiskRenderService;
import blue.services.render.RealtimeRenderServiceFactory;
import blue.ui.utilities.FileChooserManager;
import blue.ui.utilities.SimpleDocumentListener;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.HtmlBrowser.URLDisplayer;
import org.openide.modules.InstalledFileLocator;
import org.openide.util.Exceptions;
import org.openide.windows.WindowManager;

final class RealtimeRenderSettingsPanel extends javax.swing.JPanel {

    private final RealtimeRenderSettingsOptionsPanelController controller;
    private boolean loading = false;

    RealtimeRenderSettingsPanel(
            RealtimeRenderSettingsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        DocumentListener changeListener = new SimpleDocumentListener() {
            @Override
            public void documentChanged(DocumentEvent e) {
                if (!loading) {
                    RealtimeRenderSettingsPanel.this.controller.changed();
                }
            }
        };

        csoundExecText.getDocument().addDocumentListener(changeListener);
        srText.getDocument().addDocumentListener(changeListener);
        ksmpsText.getDocument().addDocumentListener(changeListener);
        nchnlsText.getDocument().addDocumentListener(changeListener);

        audioOutText.getDocument().addDocumentListener(changeListener);
        audioInText.getDocument().addDocumentListener(changeListener);
        midiOutText.getDocument().addDocumentListener(changeListener);
        midiInText.getDocument().addDocumentListener(changeListener);

        advancedText.getDocument().addDocumentListener(changeListener);
        zeroDBFSText.getDocument().addDocumentListener(changeListener);
    }

    private void fireUpdate() {
        if (!loading) {
            controller.changed();
        }
    }

    private Object chooseDriver(List<DeviceInfo> vals) throws HeadlessException {
        if (vals == null || vals.size() == 0) {
            NotifyDescriptor nd = new NotifyDescriptor(
                    "Could not discover devices for this driver.",
                    "Error", NotifyDescriptor.DEFAULT_OPTION,
                    NotifyDescriptor.ERROR_MESSAGE,
                    null, null);
            DialogDisplayer.getDefault().notify(nd);

            return null;
        }

        Object retVal = JOptionPane.showInputDialog(WindowManager.getDefault().
                getMainWindow(),
                "Choose Device:", "Choose Device",
                JOptionPane.PLAIN_MESSAGE,
                null, vals.toArray(), vals.get(0));

        return retVal;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        renderServiceComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        csoundExecText = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nchnlsText = new javax.swing.JTextField();
        ksmpsText = new javax.swing.JTextField();
        srText = new javax.swing.JTextField();
        zeroDBFSCheckBox = new javax.swing.JCheckBox();
        zeroDBFSText = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        softwareBufferCBox = new javax.swing.JCheckBox();
        hardwareBufferCBox = new javax.swing.JCheckBox();
        softwareBufferSpinner = new javax.swing.JSpinner();
        hardwareBufferSpinner = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        advancedText = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        noteAmpCBox = new javax.swing.JCheckBox();
        outOfRangeCBox = new javax.swing.JCheckBox();
        warningsCBox = new javax.swing.JCheckBox();
        benchmarkCBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        audioOutText = new javax.swing.JTextField();
        audioInText = new javax.swing.JTextField();
        midiInText = new javax.swing.JTextField();
        midiOutText = new javax.swing.JTextField();
        audioInCBox = new javax.swing.JCheckBox();
        midiInCBox = new javax.swing.JCheckBox();
        midiOutCBox = new javax.swing.JCheckBox();
        audioOutButton = new javax.swing.JButton();
        audioInButton = new javax.swing.JButton();
        midiInButton = new javax.swing.JButton();
        midiOutButton = new javax.swing.JButton();
        audioOutCBox = new javax.swing.JCheckBox();
        audioDriverCBox = new javax.swing.JCheckBox();
        midiDriverCBox = new javax.swing.JCheckBox();
        audioDriverCombo = new javax.swing.JComboBox();
        midiDriverCombo = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        disableDisplaysCBox = new javax.swing.JCheckBox();

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jPanel6.border.title"))); // NOI18N

        renderServiceComboBox.setModel(new DefaultComboBoxModel(
            RealtimeRenderSettings.getAvailableRealtimeRenderServices()));
    renderServiceComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            renderServiceComboBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel4.text_1")); // NOI18N

    csoundExecText.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.csoundExecText.text_1")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jButton5.text_1")); // NOI18N
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel5.text")); // NOI18N

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addComponent(csoundExecText, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton5))
                .addComponent(renderServiceComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    jPanel6Layout.setVerticalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(jButton5)
                .addComponent(csoundExecText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(renderServiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5))
            .addContainerGap())
    );

    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jPanel5.border.title_1"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel1.text_1")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel2.text_1")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel3.text_1")); // NOI18N

    nchnlsText.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.nchnlsText.text_1")); // NOI18N

    ksmpsText.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.ksmpsText.text_1")); // NOI18N

    srText.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.srText.text_1")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(zeroDBFSCheckBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.zeroDBFSCheckBox.text")); // NOI18N
    zeroDBFSCheckBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            zeroDBFSCheckBoxActionPerformed(evt);
        }
    });

    zeroDBFSText.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.zeroDBFSText.text")); // NOI18N

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3)
                .addComponent(jLabel2)
                .addComponent(jLabel1)
                .addComponent(zeroDBFSCheckBox))
            .addGap(58, 58, 58)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(zeroDBFSText)
                .addComponent(nchnlsText)
                .addComponent(ksmpsText)
                .addComponent(srText, javax.swing.GroupLayout.Alignment.TRAILING))
            .addContainerGap())
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(srText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(ksmpsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(nchnlsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(zeroDBFSCheckBox)
                .addComponent(zeroDBFSText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jPanel2.border.title_1"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(softwareBufferCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.softwareBufferCBox.text_1")); // NOI18N
    softwareBufferCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    softwareBufferCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    softwareBufferCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            softwareBufferCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(hardwareBufferCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.hardwareBufferCBox.text_1")); // NOI18N
    hardwareBufferCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    hardwareBufferCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    hardwareBufferCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            hardwareBufferCBoxActionPerformed(evt);
        }
    });

    softwareBufferSpinner.setModel(new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1));
    softwareBufferSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            softwareBufferSpinnerStateChanged(evt);
        }
    });

    hardwareBufferSpinner.setModel(new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1));
    hardwareBufferSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            hardwareBufferSpinnerStateChanged(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(hardwareBufferCBox)
                .addComponent(softwareBufferCBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(hardwareBufferSpinner)
                .addComponent(softwareBufferSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(softwareBufferCBox)
                .addComponent(softwareBufferSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(hardwareBufferCBox)
                .addComponent(hardwareBufferSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jPanel4.border.title_1"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jButton6, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jButton6.text_1")); // NOI18N
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(advancedText)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton6)
            .addContainerGap())
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(advancedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton6))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jPanel3.border.title_1"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(noteAmpCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.noteAmpCBox.text_1")); // NOI18N
    noteAmpCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    noteAmpCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    noteAmpCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            noteAmpCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(outOfRangeCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.outOfRangeCBox.text_1")); // NOI18N
    outOfRangeCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    outOfRangeCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    outOfRangeCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            outOfRangeCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(warningsCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.warningsCBox.text_1")); // NOI18N
    warningsCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    warningsCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    warningsCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            warningsCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(benchmarkCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.benchmarkCBox.text_1")); // NOI18N
    benchmarkCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    benchmarkCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    benchmarkCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            benchmarkCBoxActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(outOfRangeCBox)
                .addComponent(noteAmpCBox)
                .addComponent(warningsCBox)
                .addComponent(benchmarkCBox))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(noteAmpCBox)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(outOfRangeCBox)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(warningsCBox)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(benchmarkCBox)
            .addContainerGap(10, Short.MAX_VALUE))
    );

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jPanel1.border.title_1"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(audioInCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.audioInCBox.text_1")); // NOI18N
    audioInCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    audioInCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    audioInCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audioInCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(midiInCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.midiInCBox.text_1")); // NOI18N
    midiInCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    midiInCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    midiInCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            midiInCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(midiOutCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.midiOutCBox.text_1")); // NOI18N
    midiOutCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    midiOutCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    midiOutCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            midiOutCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(audioOutButton, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.audioOutButton.text_1")); // NOI18N
    audioOutButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audioOutButtonActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(audioInButton, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.audioInButton.text_1")); // NOI18N
    audioInButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audioInButtonActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(midiInButton, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.midiInButton.text_1")); // NOI18N
    midiInButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            midiInButtonActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(midiOutButton, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.midiOutButton.text_1")); // NOI18N
    midiOutButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            midiOutButtonActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(audioOutCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.audioOutCBox.text_1")); // NOI18N
    audioOutCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    audioOutCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    audioOutCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audioOutCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(audioDriverCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.audioDriverCBox.text_1")); // NOI18N
    audioDriverCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    audioDriverCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    audioDriverCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audioDriverCBoxActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(midiDriverCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.midiDriverCBox.text_1")); // NOI18N
    midiDriverCBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    midiDriverCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    midiDriverCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            midiDriverCBoxActionPerformed(evt);
        }
    });

    audioDriverCombo.setModel(new DefaultComboBoxModel(RealtimeRenderSettings.getAudioDrivers()));
    audioDriverCombo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audioDriverComboActionPerformed(evt);
        }
    });

    midiDriverCombo.setModel(new DefaultComboBoxModel(RealtimeRenderSettings.getMIDIDrivers()));
    midiDriverCombo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            midiDriverComboActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(audioDriverCBox)
                .addComponent(midiDriverCBox)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(midiOutCBox)
                    .addComponent(audioOutCBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(audioInCBox)
                    .addComponent(midiInCBox)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(midiOutText)
                        .addComponent(midiInText)
                        .addComponent(audioInText)
                        .addComponent(audioOutText))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(midiOutButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(midiInButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(audioInButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(audioOutButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addComponent(audioDriverCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(midiDriverCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(audioDriverCBox)
                .addComponent(audioDriverCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(audioOutButton)
                .addComponent(audioOutCBox)
                .addComponent(audioOutText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(audioInButton)
                .addComponent(audioInCBox)
                .addComponent(audioInText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(midiDriverCBox)
                .addComponent(midiDriverCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(midiInButton)
                .addComponent(midiInText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(midiInCBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(midiOutCBox)
                .addComponent(midiOutButton)
                .addComponent(midiOutText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jPanel7.border.title"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(disableDisplaysCBox, org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.disableDisplaysCBox.text")); // NOI18N
    disableDisplaysCBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            disableDisplaysCBoxActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
    jPanel7.setLayout(jPanel7Layout);
    jPanel7Layout.setHorizontalGroup(
        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel7Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(disableDisplaysCBox)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel7Layout.setVerticalGroup(
        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel7Layout.createSequentialGroup()
            .addComponent(disableDisplaysCBox)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(20, 20, 20))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(3, 3, 3)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    }// </editor-fold>//GEN-END:initComponents

    private void audioInCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioInCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_audioInCBoxActionPerformed

    private void midiInCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiInCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_midiInCBoxActionPerformed

    private void midiOutCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiOutCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_midiOutCBoxActionPerformed

    private void audioOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioOutButtonActionPerformed
        String driver = null;

        if (audioDriverCBox.isSelected()) {
            driver = (String) audioDriverCombo.getSelectedItem();
        }

        String command = csoundExecText.getText();

        RealtimeRenderServiceFactory factory = (RealtimeRenderServiceFactory) renderServiceComboBox.getSelectedItem();
        DiskRenderService service = factory.createDiskRenderService();

        List<DeviceInfo> vals = DriverUtilities.getAudioDevices(command, driver,
                service, false);

        Object val = chooseDriver(vals);

        if (val != null) {
            DeviceInfo info = (DeviceInfo) val;
            audioOutText.setText(info.getDeviceId());
            fireUpdate();
        }
    }//GEN-LAST:event_audioOutButtonActionPerformed

    private void audioInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioInButtonActionPerformed
        String driver = null;

        if (audioDriverCBox.isSelected()) {
            driver = (String) audioDriverCombo.getSelectedItem();
        }

        String command = csoundExecText.getText();
        RealtimeRenderServiceFactory factory = (RealtimeRenderServiceFactory) renderServiceComboBox.getSelectedItem();
        DiskRenderService service = factory.createDiskRenderService();

        List<DeviceInfo> vals = DriverUtilities.getAudioDevices(command, driver,
                service, true);

        Object val = chooseDriver(vals);

        if (val != null) {
            DeviceInfo info = (DeviceInfo) val;
            audioInText.setText(info.getDeviceId());
            fireUpdate();
        }
    }//GEN-LAST:event_audioInButtonActionPerformed

    private void midiInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiInButtonActionPerformed
        String driver = null;

        if (midiDriverCBox.isSelected()) {
            driver = (String) midiDriverCombo.getSelectedItem();
        }

        String command = csoundExecText.getText();
        RealtimeRenderServiceFactory factory = (RealtimeRenderServiceFactory) renderServiceComboBox.getSelectedItem();
        DiskRenderService service = factory.createDiskRenderService();

        List<DeviceInfo> vals = DriverUtilities.getMidiDevices(command, driver,
                service, true);

        Object val = chooseDriver(vals);

        if (val != null) {
            DeviceInfo info = (DeviceInfo) val;
            midiInText.setText(info.getDeviceId());
            fireUpdate();
        }
    }//GEN-LAST:event_midiInButtonActionPerformed

    private void midiOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiOutButtonActionPerformed
        String driver = null;

        if (midiDriverCBox.isSelected()) {
            driver = (String) midiDriverCombo.getSelectedItem();
        }

        String command = csoundExecText.getText();
        RealtimeRenderServiceFactory factory = (RealtimeRenderServiceFactory) 
                renderServiceComboBox.getSelectedItem();
        DiskRenderService service = factory.createDiskRenderService();

        List<DeviceInfo> vals = DriverUtilities.getMidiDevices(command, driver,
                service, false);

        Object val = chooseDriver(vals);

        if (val != null) {
            DeviceInfo info = (DeviceInfo) val;
            midiOutText.setText(info.getDeviceId());
            fireUpdate();
        }
    }//GEN-LAST:event_midiOutButtonActionPerformed

    private void audioOutCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioOutCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_audioOutCBoxActionPerformed

    private void audioDriverCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioDriverCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_audioDriverCBoxActionPerformed

    private void midiDriverCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiDriverCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_midiDriverCBoxActionPerformed

    private void audioDriverComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioDriverComboActionPerformed
        fireUpdate();
    }//GEN-LAST:event_audioDriverComboActionPerformed

    private void midiDriverComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiDriverComboActionPerformed
        fireUpdate();
    }//GEN-LAST:event_midiDriverComboActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int retVal = FileChooserManager.getDefault().showOpenDialog(
                getClass(), this);

        if (retVal == JFileChooser.APPROVE_OPTION) {
            File f = FileChooserManager.getDefault().getSelectedFile(
                    getClass());

            try {
                String path = f.getCanonicalPath();

                if (f.exists() && f.isFile()) {
                    csoundExecText.setText(path);
                    fireUpdate();
                }
            } catch (IOException ioe) {
                // ignore
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void softwareBufferCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softwareBufferCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_softwareBufferCBoxActionPerformed

    private void hardwareBufferCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardwareBufferCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_hardwareBufferCBoxActionPerformed

    private void softwareBufferSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_softwareBufferSpinnerStateChanged
        fireUpdate();
    }//GEN-LAST:event_softwareBufferSpinnerStateChanged

    private void hardwareBufferSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hardwareBufferSpinnerStateChanged
        fireUpdate();
    }//GEN-LAST:event_hardwareBufferSpinnerStateChanged

    private void noteAmpCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteAmpCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_noteAmpCBoxActionPerformed

    private void outOfRangeCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outOfRangeCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_outOfRangeCBoxActionPerformed

    private void warningsCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warningsCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_warningsCBoxActionPerformed

    private void benchmarkCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_benchmarkCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_benchmarkCBoxActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        File manualDir = InstalledFileLocator.getDefault().
                locate("csoundManual", "csound-manual", false);

                File index = new File(manualDir, "CommandFlags.html");
        
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().browse(index.toURI());
            } else {
                URLDisplayer.getDefault().showURL(index.toURL());
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void disableDisplaysCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableDisplaysCBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_disableDisplaysCBoxActionPerformed

    private void zeroDBFSCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroDBFSCheckBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_zeroDBFSCheckBoxActionPerformed

    private void renderServiceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renderServiceComboBoxActionPerformed
        fireUpdate();
    }//GEN-LAST:event_renderServiceComboBoxActionPerformed

    void load() {
        loading = true;

        RealtimeRenderSettings settings = RealtimeRenderSettings.getInstance();

        csoundExecText.setText(settings.csoundExecutable);
        srText.setText(settings.defaultSr);
        ksmpsText.setText(settings.defaultKsmps);
        nchnlsText.setText(settings.defaultNchnls);

        audioDriverCBox.setSelected(settings.audioDriverEnabled);
        audioDriverCombo.setSelectedItem(settings.audioDriver);
        audioOutCBox.setSelected(settings.audioOutEnabled);
        audioOutText.setText(settings.audioOutText);
        audioInCBox.setSelected(settings.audioInEnabled);
        audioInText.setText(settings.audioInText);

        midiDriverCBox.setSelected(settings.midiDriverEnabled);
        midiDriverCombo.setSelectedItem(settings.midiDriver);
        midiOutCBox.setSelected(settings.midiOutEnabled);
        midiOutText.setText(settings.midiOutText);
        midiInCBox.setSelected(settings.midiInEnabled);
        midiInText.setText(settings.midiInText);

        hardwareBufferCBox.setSelected(settings.hardwareBufferEnabled);
        hardwareBufferSpinner.setValue(new Integer(settings.hardwareBufferSize));

        softwareBufferCBox.setSelected(settings.softwareBufferEnabled);
        softwareBufferSpinner.setValue(new Integer(settings.softwareBufferSize));

        noteAmpCBox.setSelected(settings.noteAmpsEnabled);
        outOfRangeCBox.setSelected(settings.outOfRangeEnabled);
        warningsCBox.setSelected(settings.warningsEnabled);
        benchmarkCBox.setSelected(settings.benchmarkEnabled);

        disableDisplaysCBox.setSelected(settings.displaysDisabled);

        advancedText.setText(settings.advancedSettings);

        zeroDBFSCheckBox.setSelected(settings.useZeroDbFS);
        zeroDBFSText.setText(settings.zeroDbFS);

        renderServiceComboBox.setSelectedItem(settings.renderServiceFactory);

        loading = false;
    }

    void store() {
        RealtimeRenderSettings settings = RealtimeRenderSettings.getInstance();

        settings.csoundExecutable = csoundExecText.getText();
        settings.defaultSr = srText.getText();
        settings.defaultKsmps = ksmpsText.getText();
        settings.defaultNchnls = nchnlsText.getText();

        settings.audioDriverEnabled = audioDriverCBox.isSelected();
        settings.audioDriver = audioDriverCombo.getSelectedItem().toString();
        settings.audioOutEnabled = audioOutCBox.isSelected();
        settings.audioOutText = audioOutText.getText();
        settings.audioInEnabled = audioInCBox.isSelected();
        settings.audioInText = audioInText.getText();

        settings.midiDriverEnabled = midiDriverCBox.isSelected();
        settings.midiDriver = midiDriverCombo.getSelectedItem().toString();
        settings.midiOutEnabled = midiOutCBox.isSelected();
        settings.midiOutText = midiOutText.getText();
        settings.midiInEnabled = midiInCBox.isSelected();
        settings.midiInText = midiInText.getText();

        settings.hardwareBufferEnabled = hardwareBufferCBox.isSelected();
        settings.hardwareBufferSize = ((Integer) hardwareBufferSpinner.getValue()).
                intValue();

        settings.softwareBufferEnabled = softwareBufferCBox.isSelected();
        settings.softwareBufferSize = ((Integer) softwareBufferSpinner.getValue()).
                intValue();

        settings.noteAmpsEnabled = noteAmpCBox.isSelected();
        settings.warningsEnabled = warningsCBox.isSelected();
        settings.outOfRangeEnabled = outOfRangeCBox.isSelected();
        settings.benchmarkEnabled = benchmarkCBox.isSelected();

        settings.displaysDisabled = disableDisplaysCBox.isSelected();

        settings.advancedSettings = advancedText.getText();

        settings.useZeroDbFS = zeroDBFSCheckBox.isSelected();
        settings.zeroDbFS = zeroDBFSText.getText();

        settings.renderServiceFactory = (RealtimeRenderServiceFactory) renderServiceComboBox.getSelectedItem();

        settings.save();
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField advancedText;
    private javax.swing.JCheckBox audioDriverCBox;
    private javax.swing.JComboBox audioDriverCombo;
    private javax.swing.JButton audioInButton;
    private javax.swing.JCheckBox audioInCBox;
    private javax.swing.JTextField audioInText;
    private javax.swing.JButton audioOutButton;
    private javax.swing.JCheckBox audioOutCBox;
    private javax.swing.JTextField audioOutText;
    private javax.swing.JCheckBox benchmarkCBox;
    private javax.swing.JTextField csoundExecText;
    private javax.swing.JCheckBox disableDisplaysCBox;
    private javax.swing.JCheckBox hardwareBufferCBox;
    private javax.swing.JSpinner hardwareBufferSpinner;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField ksmpsText;
    private javax.swing.JCheckBox midiDriverCBox;
    private javax.swing.JComboBox midiDriverCombo;
    private javax.swing.JButton midiInButton;
    private javax.swing.JCheckBox midiInCBox;
    private javax.swing.JTextField midiInText;
    private javax.swing.JButton midiOutButton;
    private javax.swing.JCheckBox midiOutCBox;
    private javax.swing.JTextField midiOutText;
    private javax.swing.JTextField nchnlsText;
    private javax.swing.JCheckBox noteAmpCBox;
    private javax.swing.JCheckBox outOfRangeCBox;
    private javax.swing.JComboBox renderServiceComboBox;
    private javax.swing.JCheckBox softwareBufferCBox;
    private javax.swing.JSpinner softwareBufferSpinner;
    private javax.swing.JTextField srText;
    private javax.swing.JCheckBox warningsCBox;
    private javax.swing.JCheckBox zeroDBFSCheckBox;
    private javax.swing.JTextField zeroDBFSText;
    // End of variables declaration//GEN-END:variables
}
