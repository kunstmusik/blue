/*
 * blue - object composition environment for csound Copyright (c) 2000-2014
 * Steven Yi (stevenyi@gmail.com)
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License or (at your option) any
 * later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.LIB. If not, write to the Free
 * Software Foundation Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307
 * USA
 */
package blue.settings;

import blue.ui.utilities.SimpleDocumentListener;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

final class PlaybackPanel extends javax.swing.JPanel {

    private final PlaybackOptionsPanelController controller;

    private boolean loading = false;

    PlaybackPanel(PlaybackOptionsPanelController controller) {
        this.controller = controller;
        initComponents();


        DocumentListener changeListener = new SimpleDocumentListener() {

            @Override
            public void documentChanged(DocumentEvent e) {
                if (!loading) {
                    PlaybackPanel.this.controller.changed();
                }
            }
        };

        playbackLatencyCorrection.getDocument().addDocumentListener(changeListener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        playbackFPS = new javax.swing.JSpinner(new SpinnerNumberModel(20, 1, 120, 1));
        playbackLatencyCorrection = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PlaybackPanel.class, "PlaybackPanel.jLabel1.text_1")); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PlaybackPanel.class, "PlaybackPanel.jLabel2.text_1")); // NOI18N

        playbackFPS.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                playbackFPSStateChanged(evt);
            }
        });

        playbackLatencyCorrection.setText(org.openide.util.NbBundle.getMessage(PlaybackPanel.class, "PlaybackPanel.playbackLatencyCorrection.text_1")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playbackLatencyCorrection, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(playbackFPS, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(playbackFPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(playbackLatencyCorrection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void playbackFPSStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_playbackFPSStateChanged
        if (!loading) {
            controller.changed();
        }
    }//GEN-LAST:event_playbackFPSStateChanged

    void load() {
        loading = true;

        PlaybackSettings settings = PlaybackSettings.getInstance();

        playbackFPS.setValue(new Integer(settings.getPlaybackFPS()));
        playbackLatencyCorrection.setText(
                Float.toString(settings.getPlaybackLatencyCorrection()));

        loading = false;
    }

    void store() {

        PlaybackSettings settings = PlaybackSettings.getInstance();
        settings.setPlaybackFPS(((Integer) playbackFPS.getValue()).intValue());


        try {
            settings.setPlaybackLatencyCorrection(Float.parseFloat(playbackLatencyCorrection.getText()));
        } catch (NumberFormatException nfe) {
        }

        settings.save();

    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner playbackFPS;
    private javax.swing.JTextField playbackLatencyCorrection;
    // End of variables declaration//GEN-END:variables
}
