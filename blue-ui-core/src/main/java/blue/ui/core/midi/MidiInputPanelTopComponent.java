/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package blue.ui.core.midi;

import blue.BlueData;
import blue.projects.BlueProject;
import blue.projects.BlueProjectManager;
import java.beans.PropertyChangeEvent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//blue.ui.core.midi//MidiInputPanel//EN",
autostore = false)
@TopComponent.Description(
        preferredID = "MidiInputPanelTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "blue.ui.core.midi.MidiInputPanelTopComponent")
@ActionReference(path = "Menu/Window", position = 700)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MidiInputPanelAction",
        preferredID = "MidiInputPanelTopComponent"
)
@NbBundle.Messages({
    "CTL_MidiInputPanelAction=MIDI Input Panel",
    "CTL_MidiInputPanelTopComponent=MIDI Input Panel",
    "HINT_MidiInputPanelTopComponent=This is a MidiInput window"
})
public final class MidiInputPanelTopComponent extends TopComponent {

    private static MidiInputPanelTopComponent instance;

    public MidiInputPanelTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(MidiInputPanelTopComponent.class,
                "CTL_MidiInputPanelTopComponent"));
        setToolTipText(NbBundle.getMessage(MidiInputPanelTopComponent.class,
                "HINT_MidiInputPanelTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        BlueProjectManager.getInstance().addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if (BlueProjectManager.CURRENT_PROJECT.equals(evt.
                    getPropertyName())) {
                reinitialize();
                
            }
        });

        reinitialize();
    }

    protected void reinitialize() {
        BlueProject project = BlueProjectManager.getInstance().
                getCurrentProject();
        BlueData data = null;
        if (project != null) {
            data = project.getData();

            midiInputProcessorPanel1.setMidiInputProcessor(data.
                    getMidiInputProcessor());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        midiInputProcessorPanel1 = new blue.ui.core.midi.MidiInputProcessorPanel();

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MidiInputPanelTopComponent.class, "MidiInputPanelTopComponent.midiInputProcessorPanel1.TabConstraints.tabTitle"), midiInputProcessorPanel1); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    private blue.ui.core.midi.MidiInputProcessorPanel midiInputProcessorPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

}
