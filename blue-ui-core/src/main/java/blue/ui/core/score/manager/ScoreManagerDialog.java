/*
 * blue - object composition environment for csound
 * Copyright (C) 2012
 * Steven Yi <stevenyi@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package blue.ui.core.score.manager;

import blue.BlueSystem;
import blue.score.Score;
import blue.score.layers.LayerGroup;
import blue.score.layers.LayerGroupProvider;
import blue.score.layers.LayerGroupProviderManager;
import blue.ui.core.score.layers.LayerGroupUIProviderManager;
import blue.ui.utilities.BlueCommonIcons;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import jiconfont.icons.google_material_design_icons.GoogleMaterialDesignIcons;
import jiconfont.swing.IconFontSwing;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

/**
 *
 * @author stevenyi
 */
public class ScoreManagerDialog extends javax.swing.JDialog {
    private final DefaultTableModel emptyList = new DefaultTableModel();

    private Score score;
    
    /**
     * Creates new form ScoreManagerDialog
     */
    public ScoreManagerDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        TableColumn col = layersTable.getTableHeader().getColumnModel().getColumn(0);

        col.setMaxWidth(50);
        col.setMinWidth(50);
        col.setPreferredWidth(50);
        
        lGroupAddButton.setText("");
        lGroupAddButton.setIcon(BlueCommonIcons.ADD);
        lGroupMinusButton.setText("");
        lGroupMinusButton.setIcon(BlueCommonIcons.REMOVE);
        lGroupPushUpButton.setText("");
        lGroupPushUpButton.setIcon(BlueCommonIcons.PUSH_UP);
        lGroupPushDownButton.setText("");
        lGroupPushDownButton.setIcon(BlueCommonIcons.PUSH_DOWN);
        
        layersAddButton.setText("");
        layersAddButton.setIcon(BlueCommonIcons.ADD);
        layersMinusButton.setText("");
        layersMinusButton.setIcon(BlueCommonIcons.REMOVE);
        layersPushUpButton.setText("");
        layersPushUpButton.setIcon(BlueCommonIcons.PUSH_UP);
        layersPushDownButton.setText("");
        layersPushDownButton.setIcon(BlueCommonIcons.PUSH_DOWN);
    }
    
    public void setScore(Score score) {
        this.score = score;
        layerGroupsTable.setModel(new LayerGroupTableModel(score));
        layersTable.setModel(emptyList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lGroupPushUpButton = new javax.swing.JButton();
        lGroupPushDownButton = new javax.swing.JButton();
        lGroupAddButton = new javax.swing.JButton();
        lGroupMinusButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        layerGroupsTable = new JTable() {
            public boolean getScrollableTracksViewportHeight() {
                return getPreferredSize().height < getParent().getHeight();
            }
        };
        tabs = new javax.swing.JTabbedPane();
        layersPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        layersTable = new JTable() {
            public boolean getScrollableTracksViewportHeight() {
                return getPreferredSize().height < getParent().getHeight();
            }
        };
        jPanel2 = new javax.swing.JPanel();
        layersPushUpButton = new javax.swing.JButton();
        layersPushDownButton = new javax.swing.JButton();
        layersAddButton = new javax.swing.JButton();
        layersMinusButton = new javax.swing.JButton();
        propertiesScrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.title")); // NOI18N

        jSplitPane1.setDividerLocation(200);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        jPanel1.setMinimumSize(new java.awt.Dimension(30, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(160, 20));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        lGroupPushUpButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.lGroupPushUpButton.text")); // NOI18N
        lGroupPushUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lGroupPushUpButtonActionPerformed(evt);
            }
        });
        jPanel1.add(lGroupPushUpButton);

        lGroupPushDownButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.lGroupPushDownButton.text")); // NOI18N
        lGroupPushDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lGroupPushDownButtonActionPerformed(evt);
            }
        });
        jPanel1.add(lGroupPushDownButton);

        lGroupAddButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.lGroupAddButton.text")); // NOI18N
        lGroupAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lGroupAddButtonActionPerformed(evt);
            }
        });
        jPanel1.add(lGroupAddButton);

        lGroupMinusButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.lGroupMinusButton.text")); // NOI18N
        lGroupMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lGroupMinusButtonActionPerformed(evt);
            }
        });
        jPanel1.add(lGroupMinusButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        jPanel5.add(jPanel1, gridBagConstraints);

        layerGroupsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        layerGroupsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        layerGroupsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                layerGroupsTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(layerGroupsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel5.add(jScrollPane3, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanel5);

        layersPanel.setLayout(new java.awt.GridBagLayout());

        layersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        layersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane4.setViewportView(layersTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        layersPanel.add(jScrollPane4, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(30, 20));
        jPanel2.setPreferredSize(new java.awt.Dimension(160, 20));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        layersPushUpButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.layersPushUpButton.text")); // NOI18N
        layersPushUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layersPushUpButtonActionPerformed(evt);
            }
        });
        jPanel2.add(layersPushUpButton);

        layersPushDownButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.layersPushDownButton.text")); // NOI18N
        layersPushDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layersPushDownButtonActionPerformed(evt);
            }
        });
        jPanel2.add(layersPushDownButton);

        layersAddButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.layersAddButton.text")); // NOI18N
        layersAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layersAddButtonActionPerformed(evt);
            }
        });
        jPanel2.add(layersAddButton);

        layersMinusButton.setText(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.layersMinusButton.text")); // NOI18N
        layersMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layersMinusButtonActionPerformed(evt);
            }
        });
        jPanel2.add(layersMinusButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        layersPanel.add(jPanel2, gridBagConstraints);

        tabs.addTab(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.layersPanel.TabConstraints.tabTitle"), layersPanel); // NOI18N
        tabs.addTab(org.openide.util.NbBundle.getMessage(ScoreManagerDialog.class, "ScoreManagerDialog.propertiesScrollPane.TabConstraints.tabTitle"), propertiesScrollPane); // NOI18N

        jSplitPane1.setRightComponent(tabs);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lGroupMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lGroupMinusButtonActionPerformed
        if(layerGroupsTable.getSelectedRow() == -1) {
            return;
        }
        
        NotifyDescriptor descriptor = new DialogDescriptor.Confirmation("Deleting Layer Groups can not be undone. Please Confirm.", "Confirm Delete", NotifyDescriptor.OK_CANCEL_OPTION);
        
        if(DialogDisplayer.getDefault().notify(descriptor) == NotifyDescriptor.OK_OPTION) {
            LayerGroupTableModel model = getLayerGroupListModel();
            ListSelectionModel selection = layerGroupsTable.getSelectionModel();
            int startIndex = selection.getMinSelectionIndex();
            int endIndex = selection.getMaxSelectionIndex();
            selection.clearSelection();
            model.removeLayerGroups(startIndex, endIndex);
            
        }
    }//GEN-LAST:event_lGroupMinusButtonActionPerformed

    private void lGroupAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lGroupAddButtonActionPerformed
        JPopupMenu menu = getAddLayerGroupMenu();
        Point p = SwingUtilities.convertPoint(lGroupAddButton, 0, 0, this);
        menu.show(this, p.x, p.y + lGroupAddButton.getHeight());
    }//GEN-LAST:event_lGroupAddButtonActionPerformed

    private void lGroupPushUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lGroupPushUpButtonActionPerformed
        
        ListSelectionModel selection = layerGroupsTable.getSelectionModel();

        int start = selection.getMinSelectionIndex();
        int end = selection.getMaxSelectionIndex();

        if (start <= 0) {
            return;
        }

        LayerGroupTableModel model = getLayerGroupListModel();
        
        model.pushUpLayerGroups(start, end);
        
        selection.setSelectionInterval(start - 1, end - 1);
    }//GEN-LAST:event_lGroupPushUpButtonActionPerformed

    private void lGroupPushDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lGroupPushDownButtonActionPerformed
        ListSelectionModel selection = layerGroupsTable.getSelectionModel();

        int start = selection.getMinSelectionIndex();
        int end = selection.getMaxSelectionIndex();

        if (start < 0 || end >= score.size() - 1) {
            return;
        }
        
        LayerGroupTableModel model = getLayerGroupListModel();
        
        model.pushDownLayerGroups(start, end);
        
        selection.setSelectionInterval(start + 1, end + 1);
    }//GEN-LAST:event_lGroupPushDownButtonActionPerformed

    private void layersPushUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layersPushUpButtonActionPerformed
        LayersTableModel model = getLayersListModel();
        
        if(model == null) {
            return;
        }
        
        ListSelectionModel selection = layersTable.getSelectionModel();

        int start = selection.getMinSelectionIndex();
        int end = selection.getMaxSelectionIndex();

        if (end < 0 || start == 0) {
            return;
        }

        model.pushUpLayers(start, end);
        
        selection.setSelectionInterval(start - 1, end - 1);
    }//GEN-LAST:event_layersPushUpButtonActionPerformed

    private void layersPushDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layersPushDownButtonActionPerformed
        LayersTableModel model = getLayersListModel();
        
        if(model == null) {
            return;
        }
        
        ListSelectionModel selection = layersTable.getSelectionModel();

        int start = selection.getMinSelectionIndex();
        int end = selection.getMaxSelectionIndex();

        if (end < 0 || end >= model.getRowCount() - 1) {
            return;
        }

        model.pushDownLayers(start, end);
        
        selection.setSelectionInterval(start + 1, end + 1);
    }//GEN-LAST:event_layersPushDownButtonActionPerformed

    private void layersAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layersAddButtonActionPerformed
        LayersTableModel model = getLayersListModel();
        
        if(model == null) {
            return;
        }
        
        ListSelectionModel selection = layersTable.getSelectionModel();

        int end = selection.getMaxSelectionIndex();

        if (end < 0) {
            end = model.getRowCount();
        } else {
            end++;
        }
        
        model.newLayerAt(end);
        
        selection.setSelectionInterval(end, end);
    }//GEN-LAST:event_layersAddButtonActionPerformed

    private void layersMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layersMinusButtonActionPerformed
        LayersTableModel model = getLayersListModel();
        
        if(model == null) {
            return;
        }
        
        ListSelectionModel selection = layersTable.getSelectionModel();

        int start = selection.getMinSelectionIndex();
        int end = selection.getMaxSelectionIndex();

        if (end < 0 || model.getRowCount() < 2) {
            return;
        }

        int len = (end - start) + 1;

        String message = BlueSystem
                .getString("soundLayerEditPanel.delete.message1")
                + " "
                + len
                + " "
                + BlueSystem.getString("soundLayerEditPanel.delete.message2");
        if (JOptionPane.showConfirmDialog(null, message) == JOptionPane.OK_OPTION) {
            model.removeLayers(start, end);
            selection.clearSelection();
        }
    }//GEN-LAST:event_layersMinusButtonActionPerformed

    private void layerGroupsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_layerGroupsTableMouseClicked
        if (layerGroupsTable.isEditing()) {
            return;
        }

        int rowIndex = layerGroupsTable.getSelectedRow();

        if (rowIndex < 0) {
            layersTable.setModel(emptyList);
            
            propertiesScrollPane.setViewportView(null);
            
        } else {
            final LayerGroup layerGroup = score.get(rowIndex);
            
            layersTable.setModel(new LayersTableModel(layerGroup));
            
            TableColumn col = layersTable.getTableHeader().getColumnModel().getColumn(0);

            col.setMaxWidth(50);
            col.setMinWidth(50);
            col.setPreferredWidth(50);
            
            propertiesScrollPane.setViewportView(null);
            
            LayerGroupUIProviderManager manager = 
                    LayerGroupUIProviderManager.getInstance();
            
            JComponent comp = manager.getLayerGroupPropertiesPanel(layerGroup);
            
            if(comp != null) {
                propertiesScrollPane.setViewportView(comp);
            }
        }
        
        
        
//        if (UiUtilities.isRightMouseButton(e)) {
//            convertPopup.show(arrangementTable, e.getX(), e.getY());
//        }
    }//GEN-LAST:event_layerGroupsTableMouseClicked

    private LayerGroupTableModel getLayerGroupListModel() {
        return (LayerGroupTableModel)layerGroupsTable.getModel();
    }
    
    private LayersTableModel getLayersListModel() {
        if(layersTable.getModel() == emptyList) {
            return null;
        }
        return (LayersTableModel)layersTable.getModel();
    }
    
    private JPopupMenu getAddLayerGroupMenu() {
        var addLayerGroupMenu = new JPopupMenu();
            
            ActionListener listener = (ActionEvent e) -> {
                JMenuItem menuItem = (JMenuItem)e.getSource();
                LayerGroupProvider provider = (LayerGroupProvider)
                        menuItem.getClientProperty("provider");
                LayerGroup layerGroup = provider.createLayerGroup();
                LayerGroupTableModel model = getLayerGroupListModel();
                
                int index = (layerGroupsTable.getSelectionModel().getMaxSelectionIndex());
                
                if(index < 0 || index > model.getRowCount()) {
                    index = model.getRowCount();
                    model.addLayerGroup(index, layerGroup);
                } else {
                    model.addLayerGroup(index, layerGroup);
                }
                
                ListSelectionModel selection = layerGroupsTable.getSelectionModel();
                selection.setSelectionInterval(index, index);
            };
            
            LayerGroupProviderManager manager = LayerGroupProviderManager.getInstance();
            for(LayerGroupProvider provider : manager) {
                JMenuItem item = new JMenuItem("Add " + provider.getLayerGroupName() + " Layer Group");
                item.putClientProperty("provider", provider);
                item.addActionListener(listener);
                addLayerGroupMenu.add(item);
            }
        
        return addLayerGroupMenu;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(
                    ScoreManagerDialog.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(() -> {
            ScoreManagerDialog dialog = new ScoreManagerDialog(
                    new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton lGroupAddButton;
    private javax.swing.JButton lGroupMinusButton;
    private javax.swing.JButton lGroupPushDownButton;
    private javax.swing.JButton lGroupPushUpButton;
    private javax.swing.JTable layerGroupsTable;
    private javax.swing.JButton layersAddButton;
    private javax.swing.JButton layersMinusButton;
    private javax.swing.JPanel layersPanel;
    private javax.swing.JButton layersPushDownButton;
    private javax.swing.JButton layersPushUpButton;
    private javax.swing.JTable layersTable;
    private javax.swing.JScrollPane propertiesScrollPane;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
