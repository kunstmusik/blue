/*
 * blue - object composition environment for csound
 * Copyright (c) 2000-2014 Steven Yi (stevenyi@gmail.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by  the Free Software Foundation; either version 2 of the License or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation Inc., 59 Temple Place - Suite 330,
 * Boston, MA  02111-1307 USA
 */
package blue.soundObject.editor.jmask;

import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;

import blue.soundObject.jmask.Oscillator;

/**
 * 
 * @author steven
 */
public class OscillatorEditor extends javax.swing.JPanel implements DurationSettable {
    private Oscillator oscillator = null;

    /** Creates new form OscillatorEditor */
    public OscillatorEditor(Oscillator oscillator) {
        initComponents();

        oscTypeComboBox.setSelectedIndex(oscillator.getOscillatorType());

        phaseSpinner.setModel(new SpinnerNumberModel(oscillator.getPhaseInit(),
                0.0, 1.0, .01));
        exponentSpinner.setModel(new SpinnerNumberModel(oscillator
                .getExponent(), Double.NEGATIVE_INFINITY,
                Double.POSITIVE_INFINITY, .1));
        freqSpinner.setModel(new SpinnerNumberModel(oscillator.getFrequency(),
                Double.MIN_VALUE, Double.POSITIVE_INFINITY, 1));

        this.oscillator = oscillator;
        
        tableEditor.setTable(oscillator.getFreqTable());
        
        frequencyTypeComboBox.setSelectedIndex(oscillator.isFreqTableEnabled() ? 1 : 0);
                
        updateDisplay();
    }
    
    private void updateDisplay() {
        freqSpinner.setVisible(!this.oscillator.isFreqTableEnabled());
        tableEditor.setVisible(this.oscillator.isFreqTableEnabled());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        freqButtonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        oscTypeComboBox = new javax.swing.JComboBox();
        tableEditor = new blue.soundObject.editor.jmask.TableEditor();
        jLabel2 = new javax.swing.JLabel();
        phaseSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        exponentSpinner = new javax.swing.JSpinner();
        freqSpinner = new javax.swing.JSpinner();
        frequencyTypeComboBox = new javax.swing.JComboBox();

        jLabel1.setText("Oscillator");

        oscTypeComboBox.setModel(new DefaultComboBoxModel(Oscillator.FUNCTIONS));
        oscTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Initial Phase");

        phaseSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                phaseSpinnerStateChanged(evt);
            }
        });

        jLabel3.setText("Exponent");

        exponentSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                exponentSpinnerStateChanged(evt);
            }
        });

        freqSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                freqSpinnerStateChanged(evt);
            }
        });

        frequencyTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Frequency (Constant)", "Frequency (Table)" }));
        frequencyTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyTypeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oscTypeComboBox, 0, 561, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phaseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exponentSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(frequencyTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(freqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tableEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 627, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {exponentSpinner, phaseSpinner});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(oscTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(phaseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(exponentSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freqSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frequencyTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void frequencyTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyTypeComboBoxActionPerformed
    if(this.oscillator != null) {
        this.oscillator.setFreqTableEnabled(frequencyTypeComboBox.getSelectedIndex() == 1);
        updateDisplay();
    }
}//GEN-LAST:event_frequencyTypeComboBoxActionPerformed

    private void freqSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_freqSpinnerStateChanged
        if (oscillator != null) {
            oscillator.setFrequency(((Double) freqSpinner.getValue())
                    .doubleValue());
        }
    }// GEN-LAST:event_freqSpinnerStateChanged

    private void exponentSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_exponentSpinnerStateChanged
        if (oscillator != null) {
            oscillator.setExponent(((Double) exponentSpinner.getValue())
                    .doubleValue());
        }
    }// GEN-LAST:event_exponentSpinnerStateChanged

    private void phaseSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_phaseSpinnerStateChanged
        if (oscillator != null) {
            oscillator.setPhaseInit(((Double) phaseSpinner.getValue())
                    .doubleValue());
        }
    }// GEN-LAST:event_phaseSpinnerStateChanged

    private void frequencyTableRadioButtonActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_frequencyTableRadioButtonActionPerformed
        if (oscillator != null) {
            oscillator.setFreqTableEnabled(true);
        }
    }// GEN-LAST:event_frequencyTableRadioButtonActionPerformed

    private void fixedFreqRadioButtonActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_fixedFreqRadioButtonActionPerformed
        if (oscillator != null) {
            oscillator.setFreqTableEnabled(false);
        }
    }// GEN-LAST:event_fixedFreqRadioButtonActionPerformed

    private void oscTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_oscTypeComboBoxActionPerformed
        if (oscillator != null) {
            oscillator.setOscillatorType(oscTypeComboBox.getSelectedIndex());
        }
    }// GEN-LAST:event_oscTypeComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner exponentSpinner;
    private javax.swing.ButtonGroup freqButtonGroup;
    private javax.swing.JSpinner freqSpinner;
    private javax.swing.JComboBox frequencyTypeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox oscTypeComboBox;
    private javax.swing.JSpinner phaseSpinner;
    private blue.soundObject.editor.jmask.TableEditor tableEditor;
    // End of variables declaration//GEN-END:variables

    public void setDuration(double duration) {
        tableEditor.setDuration(duration);
    }

}
