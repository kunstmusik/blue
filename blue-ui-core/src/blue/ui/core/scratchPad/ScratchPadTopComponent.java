/*
 * blue - object composition environment for csound
 *  Copyright (c) 2000-2014 Steven Yi (stevenyi@gmail.com)
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published
 *  by  the Free Software Foundation; either version 2 of the License or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation Inc., 59 Temple Place - Suite 330,
 *  Boston, MA  02111-1307 USA
 */
package blue.ui.core.scratchPad;

import blue.BlueData;
import blue.ScratchPadData;
import blue.projects.BlueProject;
import blue.projects.BlueProjectManager;
import blue.ui.utilities.SimpleDocumentListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class ScratchPadTopComponent extends TopComponent {

    private static ScratchPadTopComponent instance;

    private ScratchPadData scratchPadData = null;

    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ScratchPadTopComponent";

    private ScratchPadTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ScratchPadTopComponent.class,
                "CTL_ScratchPadTopComponent"));
        setToolTipText(NbBundle.getMessage(ScratchPadTopComponent.class,
                "HINT_ScratchPadTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        this.scratchPadText.getDocument().addDocumentListener(new SimpleDocumentListener() {

            @Override
            public void documentChanged(DocumentEvent e) {
                if (scratchPadData != null) {
                    scratchPadData.setScratchText(scratchPadText.getText());
                }
            }
        });

        BlueProjectManager.getInstance().addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                if (BlueProjectManager.CURRENT_PROJECT.equals(evt.
                        getPropertyName())) {
                    reinitialize();
                }
            }
        });


        reinitialize();
    }

    private void reinitialize() {
        BlueProject project = BlueProjectManager.getInstance().
                getCurrentProject();
        if (project != null) {
            BlueData currentData = project.getData();
            setScratchPadData(currentData.getScratchPadData());
        } else {
            setScratchPadData(null);
        }
    }

    private void setScratchPadData(ScratchPadData scratchPadData) {
        this.scratchPadData = null;

        if (scratchPadData != null) {
            scratchPadText.setText(scratchPadData.getScratchText());
            wordWrapEnabledCheckBox.setSelected(
                    scratchPadData.isWordWrapEnabled());
            scratchPadText.setLineWrap(scratchPadData.isWordWrapEnabled());
            wordWrapEnabledCheckBox.setEnabled(true);
            scratchPadText.setEnabled(true);
        } else {
            scratchPadText.setText("");
            wordWrapEnabledCheckBox.setEnabled(false);
            scratchPadText.setEnabled(false);
        }

        this.scratchPadData = scratchPadData;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        scratchPadText = new javax.swing.JTextArea();
        wordWrapEnabledCheckBox = new javax.swing.JCheckBox();

        scratchPadText.setColumns(20);
        scratchPadText.setRows(5);
        jScrollPane1.setViewportView(scratchPadText);

        org.openide.awt.Mnemonics.setLocalizedText(wordWrapEnabledCheckBox, org.openide.util.NbBundle.getMessage(ScratchPadTopComponent.class, "ScratchPadTopComponent.wordWrapEnabledCheckBox.text")); // NOI18N
        wordWrapEnabledCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordWrapEnabledCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wordWrapEnabledCheckBox)
                .addContainerGap(301, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wordWrapEnabledCheckBox)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void wordWrapEnabledCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordWrapEnabledCheckBoxActionPerformed
        scratchPadText.setLineWrap(wordWrapEnabledCheckBox.isSelected());
        if (scratchPadData != null) {
            scratchPadData.setWordWrapEnabled(
                    wordWrapEnabledCheckBox.isSelected());
        }
    }//GEN-LAST:event_wordWrapEnabledCheckBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea scratchPadText;
    private javax.swing.JCheckBox wordWrapEnabledCheckBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ScratchPadTopComponent getDefault() {
        if (instance == null) {
            instance = new ScratchPadTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ScratchPadTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ScratchPadTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(
                PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ScratchPadTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ScratchPadTopComponent) {
            return (ScratchPadTopComponent) win;
        }
        Logger.getLogger(ScratchPadTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ScratchPadTopComponent.getDefault();
        }
    }
}
