/*
 * blue - object composition environment for csound Copyright (c) 2000-2014
 * Steven Yi (stevenyi@gmail.com)
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License or (at your option) any
 * later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.LIB. If not, write to the Free
 * Software Foundation Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307
 * USA
 */

/*
 * MidiInputProcessorPanel.java
 *
 * Created on Apr 4, 2010, 6:15:34 PM
 */
package blue.ui.core.midi;

import blue.midi.MidiInputProcessor;
import blue.midi.MidiKeyMapping;
import blue.midi.MidiVelocityMapping;
import blue.ui.utilities.SimpleDocumentListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author syi
 */
public class MidiInputProcessorPanel extends javax.swing.JPanel {

    private MidiInputProcessor processor;

    /** Creates new form MidiInputProcessorPanel */
    public MidiInputProcessorPanel() {
        initComponents();
        keyMapComboBox.setModel(
                new DefaultComboBoxModel(MidiKeyMapping.values()));
        ampMapComboBox.setModel(new DefaultComboBoxModel(MidiVelocityMapping.
                values()));

        keyConstantText.getDocument().addDocumentListener(new SimpleDocumentListener() {

            @Override
            public void documentChanged(DocumentEvent e) {
                if (processor != null) {
                    processor.setPitchConstant(keyConstantText.getText());
                }
            }
        });

        ampConstantText.getDocument().addDocumentListener(new SimpleDocumentListener() {

            @Override
            public void documentChanged(DocumentEvent e) {
                if (processor != null) {
                    processor.setAmpConstant(ampConstantText.getText());
                }
            }
        });

        scaleSelectionPanel1.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                if (processor != null) {
                    processor.setScale(scaleSelectionPanel1.getScale());
                }
            }
        });
    }

    public void setMidiInputProcessor(MidiInputProcessor processor) {
        this.processor = null;

        keyConstantText.setText(processor.getPitchConstant());
        ampConstantText.setText(processor.getAmpConstant());

        keyMapComboBox.setSelectedItem(processor.getKeyMapping());
        ampMapComboBox.setSelectedItem(processor.getVelMapping());

        scaleSelectionPanel1.setScale(processor.getScale());

        this.processor = processor;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        keyMapComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        keyConstantText = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        ampConstantText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ampMapComboBox = new javax.swing.JComboBox();
        scaleSelectionPanel1 = new blue.soundObject.editor.pianoRoll.ScaleSelectionPanel();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(MidiInputProcessorPanel.class, "MidiInputProcessorPanel.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(MidiInputProcessorPanel.class, "MidiInputProcessorPanel.jLabel2.text")); // NOI18N

        keyMapComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        keyMapComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyMapComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(MidiInputProcessorPanel.class, "MidiInputProcessorPanel.jLabel3.text")); // NOI18N

        keyConstantText.setText(org.openide.util.NbBundle.getMessage(MidiInputProcessorPanel.class, "MidiInputProcessorPanel.keyConstantText.text")); // NOI18N

        ampConstantText.setText(org.openide.util.NbBundle.getMessage(MidiInputProcessorPanel.class, "MidiInputProcessorPanel.ampConstantText.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(MidiInputProcessorPanel.class, "MidiInputProcessorPanel.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(MidiInputProcessorPanel.class, "MidiInputProcessorPanel.jLabel5.text")); // NOI18N

        ampMapComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ampMapComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ampMapComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyMapComboBox, 0, 135, Short.MAX_VALUE)
                            .addComponent(keyConstantText, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(scaleSelectionPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ampMapComboBox, 0, 154, Short.MAX_VALUE)
                            .addComponent(ampConstantText, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(keyMapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scaleSelectionPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(keyConstantText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ampMapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ampConstantText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(180, 180, 180))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void keyMapComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyMapComboBoxActionPerformed
        if (this.processor != null) {
            processor.setKeyMapping((MidiKeyMapping) keyMapComboBox.
                    getSelectedItem());
        }
    }//GEN-LAST:event_keyMapComboBoxActionPerformed

    private void ampMapComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ampMapComboBoxActionPerformed
        if (this.processor != null) {
            processor.setVelMapping((MidiVelocityMapping) ampMapComboBox.
                    getSelectedItem());
        }
    }//GEN-LAST:event_ampMapComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ampConstantText;
    private javax.swing.JComboBox ampMapComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField keyConstantText;
    private javax.swing.JComboBox keyMapComboBox;
    private blue.soundObject.editor.pianoRoll.ScaleSelectionPanel scaleSelectionPanel1;
    // End of variables declaration//GEN-END:variables

}
